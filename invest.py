import asyncio
import sys
import json
import pathlib
import random

import requests
import pandas
import math
import yfinance as yf
import datetime
from time import sleep
from pathlib import Path
from datetime import date, timedelta, timezone
from PIL import Image, ImageDraw, ImageFont

path_file = pathlib.Path(__file__).parent.resolve()
sys.path.append(str(path_file))

import config
from download_mb_data import download_data as msbd
from download_spb_data import download_data as spbd


class CrazyInvest:
    def __init__(self, limit=None, asset: str = 'stock', stock_market: list = ['MB'], tz=timezone.utc):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        Parameters:
            limit (int): –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–æ–≤
            asset (str): –í–∏–¥ –∞–∫—Ç–∏–≤–∞. –î–æ—Å—Ç—É–ø–Ω–æ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞:'stock' –∏–ª–∏ 'bond'
            stock_market (list): –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–∏—Ä–∂: MB - –ú–æ—Å–ë–∏—Ä–∂–∞; SPB - –ü–∏—Ç–µ—Ä—Å–∫–∞—è –ë–∏—Ä–∂–∞.
            tz (timezone): –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
        """
        self.limit = limit
        self._get_spb_stock_exchange()
        self._get_mb_stock_exchange()
        self.asset = asset
        self.date_create = datetime.datetime.now(tz)
        self.stock_market = stock_market

        self.choice()

        if self.limit:
            if self._is_integer(self.limit) and self.limit >= 300:
                while self.asset_choice['price_ru'] >= self.limit:
                    # print(self.asset_choice)
                    self.choice()
            else:
                error_str = 'limit amount is not number'
                raise Exception(error_str)

    def choice(self):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –∏ –±–∏—Ä–∂–∏ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        """
        match self.asset:
            # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
            case 'stock':
                # –≤—ã–±–æ—Ä –±–∏—Ä–∂–∏
                if ('MB' in self.stock_market) & ('SPB' in self.stock_market):
                    self.choice_table = pandas.concat([self.spb_table_stock,
                                                       self.main_table_stocks_ru],
                                                      ignore_index=True).sample().values[0]
                elif 'MB' in self.stock_market:
                    self.choice_table = self.main_table_stocks_ru.sample().values[0]
                elif 'SPB' in self.stock_market:
                    self.choice_table = self.spb_table_stock.sample().values[0]
                else:
                    print("O no. You didn't choose any stock market")
                    raise Exception('stock market not chosen')

            case 'bond':
                if ('MB' in self.stock_market) & ('SPB' in self.stock_market):
                    self.choice_table = self.main_table_bonds_ru.sample().values[0]
                elif 'MB' in self.stock_market:
                    self.choice_table = self.main_table_bonds_ru.sample().values[0]
                elif 'SPB' in self.stock_market:
                    raise Exception('At the moment you cannot use bonds from the St. Petersburg Stock Exchange')
                else:
                    print("O no. You didn't choose any stock market")
                    raise Exception('stock market not chosen')
            case _:
                raise Exception('incorrect asset name')

        # –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
        self.asset_choice = self.choice_obj(self.choice_table)

    @property
    def inform(self) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        Returns:
            (str) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        return f'''
—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ: {self.asset_choice['sec_id']}
–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {self.asset_choice['full_name']}
—Ü–µ–Ω–∞: {self.asset_choice['price_str']}
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.asset_choice['quantity']}
–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü: {self.asset_choice['price_increase']:.{2}f} %
isn: {self.asset_choice['isn']}
'''

    def telegram_text(self) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        Returns:
            (str) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
        """
        if self.asset_choice['price_increase'] > 0:
            emoji = 'üìà'
        else:
            emoji = 'üìâ'

        return f'''
–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ: `{self.asset_choice['sec_id']}`
–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: *{self.asset_choice['full_name']}*
–¶–µ–Ω–∞: {self.asset_choice['price_str']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.asset_choice['quantity']}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü: {emoji}{self.asset_choice['price_increase']:.{2}f} %
isn: {self.asset_choice['isn']}

{self.date_create}
'''.replace('.', '\.').replace('-', '\-')\
            .replace('(', '\(').replace(')', '\)')\
            .replace('+', '\+')

    def crate_img(self) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–∞.
        Returns:
            (Path) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        width = 950
        height = 1150

        img = Image.new(mode="RGBA", size=(width, height), color=(21, 21, 21))

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        background_vector = Image.open(config.vector, formats=["PNG"])
        img.paste(background_vector, (0, 0), background_vector)

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤
        path_font_montserrat_extrabold = config.path_file / "font/Montserrat-ExtraBold.ttf"
        path_font_montserrat_medium = config.path_file / "font/Montserrat-Medium.ttf"
        path_font_montserrat_light = config.path_file / "font/Montserrat-Light.ttf"
        path_font_montserrat_seambold = config.path_file / "font/Montserrat-SemiBold.ttf"
        path_font_montserrat_regular = config.path_file / "font/Montserrat-Regular.ttf"

        ticker = self.asset_choice['sec_id']

        if len(ticker) <= 10:
            font_ticker = ImageFont.truetype(str(path_font_montserrat_extrabold), 128)
        elif 15 >= len(ticker) > 10:
            size = 128 - ((len(ticker) - 10) * 7)
            font_ticker = ImageFont.truetype(str(path_font_montserrat_extrabold), size)
        else:
            font_ticker = ImageFont.truetype(str(path_font_montserrat_extrabold), 23)
        font_full_name = ImageFont.truetype(str(path_font_montserrat_medium), 32)
        font_price = ImageFont.truetype(str(path_font_montserrat_light), 110)
        font_other = ImageFont.truetype(str(path_font_montserrat_medium), 32)
        font_percent = ImageFont.truetype(str(path_font_montserrat_seambold), 84)
        font_id = ImageFont.truetype(str(path_font_montserrat_seambold), 32)
        font_date = ImageFont.truetype(str(path_font_montserrat_regular), 32)

        # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü
        if self.asset_choice['price_increase'] >= 0:
            chart_img = Image.open(config.green_chart, formats=["PNG"])
            color_accent = (203, 252, 1)
            price_increase = self.asset_choice['price_increase']
        elif self.asset_choice['price_increase'] == 'nan':
            price_increase = 0
        else:
            price_increase = self.asset_choice['price_increase']
            chart_img = Image.open(config.red_chart, formats=["PNG"])
            color_accent = (252, 1, 1)

        img.paste(chart_img, (0, 0), chart_img)

        img_text = Image.new(mode="RGBA", size=(width, height), color=(255, 255, 255))
        draw_text = ImageDraw.Draw(img_text)
        img_text.putalpha(0)

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        draw_text.text((width / 2, 230), self.asset_choice['sec_id'],
                       fill="white", anchor="ms", font=font_ticker)
        draw_text.text((width / 2, 290), self.asset_choice['full_name'],
                       fill="white", anchor="ms", font=font_full_name)
        price = self.asset_choice['price']
        price_ru = self.asset_choice['price_ru']
        currency = '—Ä—É–±'
        if price != price_ru:
            currency = price["currency"]
            price = price["stock_current_prise"]
            draw_text.text((width / 2, 400), f'({price} {currency})',
                           fill="white", anchor="ms", font=font_other)
        draw_text.text((width / 2, 500), f"{price_ru:.{2}f}",
                       fill="white", anchor="ms", font=font_price)
        draw_text.text((405, 550), 'RUB', fill=color_accent, anchor="rs",
                       font=font_other)
        draw_text.text((540, 550), f'{self.asset_choice["quantity"]} –®–¢',
                       fill=color_accent, anchor="ls", font=font_other)
        draw_text.line([(435, 540), (510, 540)], fill=color_accent, width=2)
        draw_text.text(((width / 2), 745),
                       f'{price_increase:.{2}f}%',
                       fill=color_accent, anchor="ms", font=font_percent)
        draw_text.text((width / 2, 1080), self.asset_choice['isn'],
                       fill="white", anchor="ms", font=font_id)
        draw_text.text((width / 2, 1120), str(self.date_create),
                       fill="white", anchor="ms", font=font_date)

        img.alpha_composite(img_text, (0, 0))
        img_name = config.path_file / f"img/{str(self.date_create).split('.')[0]}.png"
        img.save(img_name, "PNG")
        return Path(img_name).resolve()

    def print_asset(self):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        print(f'''
{'-' * 60}
{self.inform}
{'-' * 28}
{self.date_create}
{'-' * 60}
''')

    @staticmethod
    def _is_integer(n: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        Returns:
            (bool) —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ–º
        """
        try:
            float(n)
        except ValueError:
            return False
        else:
            return float(n).is_integer()

    def percentage_change(self, price: float, seci: str, boardid: str) -> float:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —Å –ú–æ—Å–ë–∏—Ä–∂–∏

        Parameters:
            price (float): –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            seci (str): –¢–∏–∫–µ—Ç –∞–∫—Ç–∏–≤–∞
            boardid (str): –≤–∏–¥ –∞–∫—Ç–∏–≤–∞

        Returns:
            percent(float): –ú–µ—Å—è—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        day = date.today() - timedelta(days=30)
        percent = 0
        match self.asset:
            case 'stock':
                url = f'http://iss.moex.com/iss/history/engines/stock/markets/shares/boards/{boardid}/securities/{seci}.json?iss.meta=off&iss.only=history&history.columns=SECID,TRADEDATE,CLOSE&limit=1&from={day}'
            case 'bond':
                url = f'http://iss.moex.com/iss/bonds/engines/stock/markets/shares/boards/{boardid}/securities/{seci}.json?iss.meta=off&iss.only=history&history.columns=SECID,TRADEDATE,CLOSE&limit=1&from={day}'
            case _:
                url = ''
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()

            prise_1mo = data['history']['data'][0][2]
            if prise_1mo:
                percent = (price - prise_1mo) / prise_1mo * 100
        return percent

    def choice_obj(self, data: list) -> dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞

        Parameters:
            data (list): –î–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞

        Returns:
            return (dict): –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–µ —Å —Ü–µ–Ω–æ–π
        try:
            data_nan = math.isnan(data[3])
        except IndexError:
            data_nan = True

        if data_nan:
            price = self._get_current_price(data[0])
            price_str = f'({price["stock_current_prise"]} {price["currency"]}) {price["rub_prise"]:.{2}f} —Ä—É–±.'
            price_ru = price["rub_prise"]
            price_increase = price["price_increase"]
        else:
            price = data[3]
            price_ru = data[3]
            price_str = f'{data[3]} —Ä—É–±.'
            price_increase = self.percentage_change(price_ru, data[0], data[4])

        quantity = 1
        if self.limit:
            if self.limit >= price_ru:
                int_div = int(self.limit // price_ru) + 1
                quantity = random.choice(range(1, int_div))
        return {
            'sec_id': data[0],
            'full_name': data[1],
            'isn': data[2],
            'price': price,
            'price_str': price_str,
            'price_ru': price_ru,
            'quantity': quantity,
            'price_increase': price_increase
        }

    @staticmethod
    def file_exist(path: str, acton):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞

        Parameters:
            path (str): –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
            acton: –§—É–Ω–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        """
        path = pathlib.Path(path)
        if not path.exists():
            try:
                loop = asyncio.get_running_loop()
            except RuntimeError:
                loop = None

            if loop and loop.is_running():
                loop.create_task(acton())
                sleep(4)
            else:
                asyncio.run(acton())
                sleep(4)

    def _get_mb_stock_exchange(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ json
        """
        # open JSON
        for file_name in [config.stocks_file, config.bpif_file,
                          config.ofz_file, config.bonds_file]:
            self.file_exist(file_name, msbd)

        with open(config.stocks_file, 'r') as file:
            shares_json = json.load(file)

        with open(config.bpif_file, 'r') as file:
            bpif_json = json.load(file)

        with open(config.ofz_file, 'r') as file:
            ofz_json = json.load(file)

        with open(config.bonds_file, 'r') as file:
            bonds_json = json.load(file)

        # –ê–∫—Ü–∏–∏ –∏ –ø–∏—Ñ—ã
        self.main_table_stocks_ru = pandas.concat([self._get_short_table(shares_json),
                                                   self._get_short_table(bpif_json)],
                                                  ignore_index=True)

        # –û–±–ª–∏–≥–∞—Ü–∏–∏ –∏ –û–§–ó
        self.main_table_bonds_ru = pandas.concat([self._get_short_table(ofz_json),
                                                  self._get_short_table(bonds_json)],
                                                 ignore_index=True)

    @staticmethod
    def _get_short_table(json_dict: dict) -> pandas.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏

        Parameters:
            json_dict (dict): json –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        """
        data = json_dict['securities']['data']
        columns = json_dict['securities']['metadata']

        df = pandas.DataFrame(data=data, columns=columns)

        short_table = df[['SECID', 'SECNAME', 'ISIN', 'PREVPRICE', 'BOARDID']]
        return short_table

    def _get_spb_stock_exchange(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–∏—Ç–µ—Ä—Å–∫–æ–π –±–∏—Ä–∂–∏
        """
        self.file_exist(config.spb_file, spbd)

        spb_table = pandas.read_csv(config.spb_file, sep=';')

        # –Ω–∞–∑–≤–∞–Ω–∏–µ e_full_name
        # –∫–æ–¥ s_RTS_code
        # –∏—Å_–∫–æ–¥ s_ISIN_code
        # –≤–∏–¥ –∞–∫—Ç–∏–≤–∞ s_sec_type_name_dop
        spb_table = spb_table[['s_RTS_code', 's_ISIN_code', 'e_full_name', 's_sec_type_name_dop']]
        spb_table.rename(columns={'s_RTS_code': 'SECID', 'e_full_name': 'SECNAME', 's_ISIN_code': 'ISIN'}, inplace=True)

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≤–∏–¥—É –∞–∫—Ç–∏–≤–∞ (–∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏)
        spb_table_stock = spb_table[(spb_table.s_sec_type_name_dop == '–ê–∫—Ü–∏–∏')]
        self.spb_table_stock = spb_table_stock[['SECID', 'SECNAME', 'ISIN']]

        # spb_table_bond = spb_table[(spb_table.s_sec_type_name_dop == '–û–±–ª–∏–≥–∞—Ü–∏–∏')]
        # self.spb_table_bond = spb_table_bond[['SECID', 'SECNAME', 'ISIN']]

    @staticmethod
    def _get_currency_price(currency: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—á–µ–≥–æ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª—é—Ç—ã.

        Parameters:
            currency(str): –í–∞–ª—é—Ç–∞ –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –∫—É—Ä—Å.
        Returns:
            all_currencies(str): –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª—è—Ö
        """
        all_currencies = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
        return all_currencies['Valute'][currency]['Value']

    def _get_current_price(self, sec_id_choice: str) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞ —Å –°–ü–ë

        Parameters:
            sec_id_choice(str): –¢–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        Returns:
            info(dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∞:
                stock_current_prise - —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≤–∞–ª—é—Ç–µ
                currency - –≤–∞–ª—é—Ç–∞
                rub_prise - —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
                price_increase - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        msft = yf.Ticker(sec_id_choice)
        try:
            stock_current_prise = msft.info['currentPrice']
            currency = msft.info['financialCurrency']
            dollar_prise = self._get_currency_price(currency)
            rub_prise = stock_current_prise * dollar_prise

            hist = msft.history(period="1mo")
            open_1mo = hist['Open'][0]
            price_increase = (stock_current_prise - open_1mo) / open_1mo * 100

            return {'stock_current_prise': stock_current_prise,
                    'currency': currency,
                    'rub_prise': rub_prise,
                    'price_increase': price_increase}
        except KeyError as er:
            if msft.info['regularMarketPrice'] is None:
                print('f')
                self.choice()
            Exception(er)
